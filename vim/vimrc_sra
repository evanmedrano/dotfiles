" Use the space key as our leader.
let mapleader = "\<Space>"

""
"" Customisations
""

if filereadable(expand("~/.vimrc.before"))
source ~/.vimrc.before
endif

" ==========================================================
" Additional Plugins
" ==========================================================
call plug#begin()

" ======================================
" HTML/CSS plugins
" ======================================
" HTML abbreviation expander
Plug 'mattn/emmet-vim'
" HTML5 syntax
Plug 'othree/html5.vim'
" SCSS syntax
Plug 'cakebaker/scss-syntax.vim'

" ======================================
" Ruby/Rails plugins
" ======================================
" Ruby support
Plug 'vim-ruby/vim-ruby'
" Rails support
Plug 'tpope/vim-rails'
" Configures path and tags settings to include all libraries in Gemfile
Plug 'tpope/vim-bundler'
" Configures path to include lib and ext directories
Plug 'tpope/vim-rake'
" Quick navigation
Plug 'tpope/vim-unimpaired'
" Index Ruby standard lib with ctags
Plug 'tpope/rbenv-ctags'

" =====================================
" Go plugins
" =====================================
" Provides support for Go
Plug 'fatih/vim-go'

" =====================================
" JS/TS plugins
" =====================================
" Provides syntax highlighting and improved indentation
Plug 'pangloss/vim-javascript'
" Clean up my code please
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" Helpful TypeScript plugin
Plug 'Quramy/tsuquyomi'
" TypeScript syntax highlighter
Plug 'HerringtonDarkholme/yats.vim'
" Auto bracket pairing
Plug 'jiangmiao/auto-pairs'

"" =====================================
" Misc plugins
" =====================================
" Testing
Plug 'vim-test/vim-test'
" Make vim VSCode smart
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Search tool
Plug 'mileszs/ack.vim'
" Global replace throughout all files
Plug 'skwp/greplace.vim'
" Surround (cs"')
Plug 'tpope/vim-surround'
" Run background jobs asynchronously
Plug 'tpope/vim-dispatch'
" Adds end automatically to def,if,do,etc
Plug 'tpope/vim-endwise'
" Vim and tmux navigation
Plug 'christoomey/vim-tmux-navigator'
" Vim airline themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Easy comments
Plug 'tpope/vim-commentary'
" Store vim sessions
Plug 'tpope/vim-obsession'
" Colorschemes!
Plug 'flazz/vim-colorschemes'
" Random colorschemes!
Plug 'sunuslee/vim-plugin-random-colorscheme-picker'
" Git blame
Plug 'APZelos/blamer.nvim'
" NERDtree
Plug 'preservim/nerdtree'
" Ctrlp Search
Plug 'ctrlpvim/ctrlp.vim'
" Autocomplete
Plug 'ervandew/supertab'
" Trailing whitespace
Plug 'bronson/vim-trailing-whitespace'
" Visualization in normal mode
Plug 'mg979/vim-visual-multi'
" Vim search
Plug 'eugen0329/vim-esearch'

call plug#end()

" =====================================
" Customize keys for plugins
" =====================================
" Sets emmet to trigger with two consecutive ,'s
let g:user_emmet_leader_key = ','
" Sets the default terminal for tests to iTerm2
let g:rspec_runner = "os_x_iterm2"

" =======================================================
" Custom mapping
" =======================================================
" Vim-test mappings
map <Leader>ns :TestNearest<CR>
map <Leader>fs :TestFile<CR>
map <Leader>ss :TestSuite<CR>
map <Leader>ls :TestLast<CR>
map <silent>vs :TestVisit<CR>

" Go command mappings
map <Leader>gb :GoBuild<CR>
map <Leader>gi :GoInstall<CR>
map <Leader>gr :GoRun<CR>

" Automatically open factories.rb
map <Leader>ff :call OpenFactoryFile()<CR>

" Mapping for vim-unimpaired for easy naviagtion
nmap < [
nmap > ]

" Mapping for vim-obsession
map <Leader>cs :Obsess<CR>
map <Leader>ds :Obsess!<CR>

" Mapping C-s requires control flow to be disabled in the .zshrc/.bashrc file

" Normal mode
nmap <C-s> <esc>:w<CR>
nmap <C-t> <esc>:tabnew<CR>
nmap <C-x> <C-w>c

nmap 0 ^
nmap k gk
nmap j gj

" Quickly change between single and double quotes
nmap <leader>dq <esc>:%s/'/"<Cr>
nmap <leader>sq <esc>:%s/"/'<Cr>

" Plugin mapping
nmap <leader>p :Prettier<cr>
nmap <leader>qf :TsuQuickFix<cr>
nmap <leader>; :CommaOrSemiColon<cr>
nmap <F9> :AutoCommaOrSemiColonToggle<CR>


" Vim assistance
nmap <leader>hl <esc>:nohls<CR>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>vr :sp $MYVIMRC<cr>
" Adjust colorschemes
nmap <leader>cob <esc>:colorscheme bubblegum-256-dark<CR>
nmap <leader>coh <esc>:colorscheme smarties<CR>
nmap <leader>con <esc>:colorscheme neonwave<CR>
nmap <leader>cow <esc>:colorscheme arcadia<CR>
nmap <leader>com <esc>:colorscheme SerialExperimentsLain<CR>
map <leader>csn <esc>:CSnext<CR>
" Dirty copy and paste
nmap <leader>cp <esc>:w /tmp/temp.txt<CR>
nmap <leader>ps <esc>:r /tmp/temp.txt<CR>
nmap <leader>dl <esc>:!rm /tmp/temp.txt<CR>

nmap <F6> :NERDTreeToggle<CR>

" Insert mode
imap <C-s> <esc>:w<CR>
imap jk <esc>
imap kj <esc>

" Commands to help with typos
command! Q q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Mappings to help with Vim window resizing

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Zoom a Vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Default to use spaces instead of tabs
set expandtab

" ========================================================
" Go stuff
" ========================================================
au BufNewFile,BufRead *.go setlocal noet ts=8 sw=8 sts=8
let g:go_fmt_command = "goimports"

" ========================================================
" coc.nvim stuff
" ========================================================
" Use K to show documentation in preview window
 nnoremap <silent> K :call <SID>show_documentation()<CR>

 function! s:show_documentation()
   if (index(['vim','help'], &filetype) >= 0)
     execute 'h '.expand('<cword>')
   else
     call CocAction('doHover')
   endif
 endfunction

" ========================================================
" Ruby stuff
" ========================================================
augroup myfiletypes
  " Clear old autocmds in group
  autocmd!

  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib

  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?

augroup END

" ========================================================
" Test running stuff
" ========================================================
let g:rspec_command = "!clear && bin/rspec {spec}"

function! OpenFactoryFile()
  let current_directory = expand("%@%")

  if (current_directory =~ "engines")
    execute ":sp **/*/spec/factories.rb"
  else
    execute ":sp spec/factories.rb"
  end
endfunction

" =======================================================
" Prettier settings
" =======================================================
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

" =======================================================
" Blamer settings
" =======================================================
nmap <leader>bt <esc>:BlamerToggle<CR>

" =======================================================
" Ctrlp settings
" =======================================================
let g:ctrlp_max_files=0
" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir': '\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|vendor\|node_modules\|log\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$'
  \ }

" =======================================================
" Vim settings
" =======================================================
" assume the /g flag on :s substitutions to replace all matches
set gdefault
" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd
set relativenumber
set number
" always display the status line
set laststatus=2
set textwidth=80
set scrolloff=10
" Allows more dynamic matching
runtime macros/matchit.vim

set hidden
set re=0
set encoding=utf8

" Show dot files in NERDtree
let NERDTreeShowHidden=1

" No swap files
set noswapfile

" Appearance
set t_Co=256
syntax on

" Indentation
set shiftwidth=2
set autoindent
set smartindent
set tabstop=2

" Shows a line where lines have gone over 80 characters
set colorcolumn=+1
" Removes said line from markdown files
autocmd FileType markdown set colorcolumn=""
" Helps with visual indentation guidelines
set cursorcolumn
set cursorline

" Remove netrw
let g:netrw_banner=0

"" =======================================================
" Airline settings
" =======================================================
let g:airline_theme='violet'
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''"

"" =======================================================
" Greplace settings
" =======================================================
set grepprg=ack
let g:grep_cmd_opts = '--noheading'

" =======================================================
" Git blamer settings
" =======================================================
let g:blamer_enabled = 1
let g:blamer_delay = 100

" =======================================================
" Status line functions
" =======================================================
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction
" .vimrc.after is loaded after the plugins have loaded
