" Use the space key as our leader.
let mapleader = "\<Space>"

""
"" Janus setup
""

" Define paths
if has('win32') || has('win64') || has('win32unix')
  let g:janus_path = escape(expand("~/.vim/janus/vim"), ' ')
  let g:janus_vim_path = escape(expand("~/.vim/janus/vim"), ' ')
else
  let g:janus_path = escape(fnamemodify(resolve(expand("<sfile>:p")), ":h"), ' ')
  let g:janus_vim_path = escape(fnamemodify(resolve(expand("<sfile>:p" . "vim")), ":h"), ' ')
endif
let g:janus_custom_path = expand("~/.janus")

" Source janus's core
exe 'source ' . g:janus_vim_path . '/core/before/plugin/janus.vim'

" You should note that groups will be processed by Pathogen in reverse
" order they were added.
call janus#add_group("tools")
call janus#add_group("langs")
call janus#add_group("colors")

""
"" Customisations
""

if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

" ==========================================================
" Additional Plugins
" ==========================================================
call plug#begin()

" ======================================
" HTML/CSS plugins
" ======================================
" HTML abbreviation expander
Plug 'mattn/emmet-vim'
" HTML5 syntax
Plug 'othree/html5.vim'
" SCSS syntax
Plug 'cakebaker/scss-syntax.vim'
" Color highlighter
Plug 'ap/vim-css-color', { 'for': ['css', 'sass', 'scss'] }

" ======================================
" Ruby/Rails plugins
" ======================================
" Ruby support
Plug 'vim-ruby/vim-ruby'
" Rails support
Plug 'tpope/vim-rails'
" Configures path and tags settings to include all libraries in Gemfile
Plug 'tpope/vim-bundler'
" Configures path to include lib and ext directories
Plug 'tpope/vim-rake'
" Configures git superpowers
Plug 'tpope/vim-fugitive'
" Quick navigation
Plug 'tpope/vim-unimpaired'
" Index Ruby standard lib with ctags
Plug 'tpope/rbenv-ctags'
" RSpec testing shortcuts
Plug 'thoughtbot/vim-rspec'

" =====================================
" Ember JS plugins
" =====================================
" Handlebars
Plug 'mustache/vim-mustache-handlebars'

" =====================================
" Misc plugins
" =====================================
" Global replace throughout all files
Plug 'skwp/greplace.vim'
" Surround (cs"')
Plug 'tpope/vim-surround'
" Run background jobs asynchronously
Plug 'tpope/vim-dispatch'
" Adds end automatically to def,if,do,etc
Plug 'tpope/vim-endwise'
" Disable arrow keys and shows how often I try to use them
Plug 'mrmargolis/dogmatic.vim'
" Vim and tmux navigation
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" =====================================
" Customize keys for plugins
" =====================================
" Sets emmet to trigger with two consecutive ,'s
let g:user_emmet_leader_key = ','
" Sets the default terminal for tests to iTerm2
let g:rspec_runner = "os_x_iterm2"
" Allows mustache abbreviations
let g:mustache_abbreviations = 1

" Disable plugins prior to loading pathogen
exe 'source ' . g:janus_vim_path . '/core/plugins.vim'

" =======================================================
" Custom mappings
" =======================================================

" RSpec.vim mappings
map <Leader>ss :call RunCurrentSpecFile()<CR>
map <Leader>ns :call RunNearestSpec()<CR>
map <Leader>ls :call RunLastSpec()<CR>
map <Leader>as :call RunAllSpecs()<CR>

" Automatically open factories.rb
map <Leader>ff :call OpenFactoryFile()<CR>

" Mapping C-s requires control flow to be disabled in the .zshrc/.bashrc file

" Normal mode
nmap <C-s> <esc>:w<CR>
nmap <C-t> <esc>:tabnew<CR>
nmap <C-x> <C-w>c

nmap 0 ^
nmap k gk
nmap j gj

nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Insert mode
imap <C-s> <esc>:w<CR>
imap jk <esc>
imap kj <esc>

" Commands to help with typos
command! Q q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Mappings to help with Vim window resizing

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Zoom a Vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" ========================================================
" Ruby stuff
" ========================================================
syntax on

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!

  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80

  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?

augroup END

" ========================================================
" Test running stuff
" ========================================================
let g:rspec_command = "!clear && bin/rspec {spec}"

function! OpenFactoryFile()
  if filereadable("test/factories.rb")
    execute ":sp test/factories.rb"
  else
    execute ":sp spec/factories.rb"
  end
endfunction

" =======================================================
" Vim settings
" =======================================================
" assume the /g flag on :s substitutions to replace all matches
set gdefault
" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd
set relativenumber
" always display the status line
set laststatus=2
set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#CursorColumn#
set statusline+=\ %f
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%

set autoindent
set scrolloff=4
" Allows more dynamic matching
runtime macros/matchit.vim

colorscheme jellybeans

" =======================================================
" Status line functions
" =======================================================
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

""
"" Pathogen setup
""

" Load all groups, custom dir, and janus core
call janus#load_pathogen()

" .vimrc.after is loaded after the plugins have loaded
